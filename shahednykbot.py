import asyncio
import random
import logging
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto
import os

# üîê –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNELS = ['DeepStateUA', 'RVvoenkor', 'sentdefender', 'PpoUaRadar', 'vanek_nikolaev']

# üß† –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, —è–∫—ñ –±–æ—Ç –≤–≤–∞–∂–∞—î "–≤–∞–∂–ª–∏–≤–∏–º–∏"
keywords = ['—à–∞—Ö–µ–¥', '—Ä–∞–∫–µ—Ç–∞', '—ñ—Å–∫–∞–Ω–¥–µ—Ä', '–∫—ñ–Ω–∂–∞–ª', '–¥—Ä–æ–Ω', '–±–ø–ª–∞', '—Ö-101', '–∑–∞–≥—Ä–æ–∑–∞', '–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞', '–ª–µ—Ç–∏—Ç—å', '–ø–ø–æ']

# üòÇ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
jokes = [
    'üöÄ –®–∞—Ö–µ–¥–∏–∫ –≤–∏–ª–µ—Ç—ñ–≤ ‚Äî —Ç—Ä–∏–º–∞–π –∫–∞–ø–µ–ª—é—Ö–∞!',
    'üß† –ü–ü–û –ø—Ä–∞—Ü—é—î, –∞ —Ç–∏ –ø—Ä–∞—Ü—é–π –Ω–∞–¥ —Å–æ–±–æ—é!',
    'üí© –õ–µ—Ç–∏—Ç—å –≥—ñ–≤–Ω–æ ‚Äî —è–∫ –∑–∞–≤–∂–¥–∏ –ø–æ –≥—Ä–∞—Ñ—ñ–∫—É!',
    'üßª –ü—Ä–∏–ª–µ—Ç—ñ–ª–∞ —Å—Ä...–∞ ‚Äî —Ç—Ä–∏–º–∞–π —Ç—É–∞–ª–µ—Ç!',
    'ü™ñ –ö—ñ–Ω–∂–∞–ª –ª–µ—Ç–∏—Ç—å ‚Äî –∑–∞—Ö–æ–≤–∞–π—Å—è –≤ –∫–∞—Å—Ç—Ä—É–ª—é!',
    'üî• –†–∞–∫–µ—Ç–∞ –Ω–∞ –ø—ñ–¥–ª—å–æ—Ç—ñ ‚Äî –Ω–µ –ø–∞–Ω—ñ–∫—É–π, –≥–æ—Ä–∏ —Å–ø–æ–∫—ñ–π–Ω–æ!',
    'ü´£ –ó–Ω–æ–≤—É? –¢–∞ —Å–∫—ñ–ª—å–∫–∏ –º–æ–∂–Ω–∞!',
    'üòµ –®–∞—Ö–µ–¥–∏–∫ –ø—Ä–∏–ª–µ—Ç—ñ–≤ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –∑ —Ä–∞–Ω–∫–æ–º!',
    'üéØ –ù–∞–¥—ñ—é—Å—å, —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ–ª–µ—Ç–∏—Ç—å –º–∏–º–æ.',
    'üì° –õ–æ–∫–∞—Ç–æ—Ä —Å–∫–∞–∑–∞–≤ ‚Äî —à–æ—Å—å –ª–µ—Ç–∏—Ç—å... –∞ —â–æ ‚Äî —Ñ—ñ–≥ –π–æ–≥–æ –∑–Ω–∞—î.'
]

# ‚öôÔ∏è Telegram –±–æ—Ç–∏
bot = Bot(token=BOT_TOKEN)
client = TelegramClient('session', API_ID, API_HASH)

# üßπ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def is_alerting_text(text):
    text_lower = text.lower()
    return any(word in text_lower for word in keywords)

def clean_text(text):
    lines = text.split('\n')
    clean_lines = [line for line in lines if not line.lower().startswith('–ø—ñ–¥–ø–∏—Å—É–π—Å—è') and 'telegram' not in line.lower()]
    return '\n'.join(clean_lines)

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –∫–∞–Ω–∞–ª—ñ–≤
@client.on(events.NewMessage(chats=CHANNELS))
async def handler(event):
    try:
        message = event.message
        text = message.message or ""
        if is_alerting_text(text):
            cleaned = clean_text(text)
            joke = f"<b>{random.choice(jokes)}</b>"
            full_message = f"{joke}\n\n{cleaned}" if cleaned else joke

            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç
            await bot.send_message(chat_id='@Shahednykbot', text=full_message, parse_mode=ParseMode.HTML)

            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ, —è–∫—â–æ —î
            if message.media and isinstance(message.media, MessageMediaPhoto):
                file = await message.download_media()
                await bot.send_photo(chat_id='@Shahednykbot', photo=open(file, 'rb'))
                os.remove(file)

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# üîò –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update, context):
    await update.message.reply_text("üëã –Ø –®–∞—Ö–µ–¥–∏–∫-–±–æ—Ç. –¢–∏—Å–Ω–∏ /situation, —è–∫—â–æ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —â–æ –ª–µ—Ç–∏—Ç—å.")

# üß® –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /situation
async def situation(update, context):
    text = random.choice(jokes)
    await update.message.reply_text(f"üì° –ü–æ—Ç–æ—á–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è:\n\n<b>{text}</b>", parse_mode=ParseMode.HTML)

# üîÅ –ó–∞–ø—É—Å–∫ —É—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
async def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("situation", situation))

    # –ó–∞–ø—É—Å–∫ Telethon
    await client.start()
    await client.connect()
    logging.info("‚úÖ Telethon –ø—ñ–¥ º—î–¥–Ω–∞–Ω–æ")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.create_task(app.run_polling())
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
