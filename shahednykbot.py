import asyncio
import logging
import random
from telethon import TelegramClient
from telethon.tl.types import MessageMediaPhoto
from telethon.errors import SessionPasswordNeededError
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# üîê –î–∞–Ω—ñ –¥–ª—è Telethon
api_id = 26549615
api_hash = 'f43d6245868e5bae41c40872fb873dec'
phone_number = '+380500290291'

# ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7395027911:AAGkiRcvxs8hP878uv9nvo5mGwDe39loxFg'

# üì° –ö–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
CHANNELS = [
    'https://t.me/DeepStateUA',
    'https://t.me/RVvoenkor',
    'https://t.me/sentdefender',
    'https://t.me/PpoUaRadar',
    'https://t.me/vanek_nikolaev'
]

# üß† –ó–∞–ø–∞–º º—è—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
last_messages = {}
logging.basicConfig(level=logging.INFO)

# ‚ñ∂Ô∏è /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("–°–∏—Ç—É–∞—Ü—ñ—è ‚ö†Ô∏è")]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –®–∞—Ö–µ–¥–∏–∫. –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–°–∏—Ç—É–∞—Ü—ñ—è', —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É.",
        reply_markup=markup
    )

# üõë Unknown —Ç–µ–∫—Å—Ç
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–°–∏—Ç—É–∞—Ü—ñ—è'. –Ø –Ω–µ —á–∏—Ç–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

# üì° –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def situation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—ñ–≤...")
    messages = await fetch_latest_posts()
    if messages:
        for msg in messages:
            await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚úÖ –í—Å–µ —Å–ø–æ–∫—ñ–π–Ω–æ, –Ω—ñ—á–æ–≥–æ –Ω–æ–≤–æ–≥–æ –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.")

# üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ –∫–∞–Ω–∞–ª—ñ–≤ (–∑ –≥—É–º–æ—Ä–æ–º —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–º)
async def fetch_latest_posts():
    client = TelegramClient('anon_session', api_id, api_hash)
    await client.connect()
    messages = []

    keywords = ['—à–∞—Ö–µ–¥', '—à–∞—Ö–æ–¥—Ä–æ–Ω', '–¥—Ä–æ–Ω', '—Ä–∞–∫–µ—Ç–∞', '–∫—ñ–Ω–∂–∞–ª', '—ñ—Å–∫–∞–Ω–¥–µ—Ä', '—É–¥–∞—Ä', '–ø—Ä–∏–ª—ñ—Ç', '–∫–∞—Ä—Ç–∞', '—Ç—Ä–∏–≤–æ–≥–∞']
    humor = [
        '–ü–æ–≥–∞–Ω—ñ —à–∞—Ö–µ–¥–∏–∫–∏ –∑–Ω–æ–≤—É –ª–µ—Ç—è—Ç—å üòí',
        '–ì–æ—Ä—î—à–Ω—ñ–∫ –≥–æ–≤–Ω—î—à–Ω—ñ–∫ –¥–µ—Å—å –≤ –¥–æ—Ä–æ–∑—ñ ‚úàÔ∏è',
        '–ì–µ—Ç—å —Å–º–µ—Ä—Ç—å —ñ –≤–æ—à—ñ ‚Äî —Å—Ö–æ–≤–∞–π—Å—è, –¥—Ä—É–∂–µ üêÄ',
        '–ù—ñ—á–Ω–∞ –∫–∞—Ä—Ç–∞ –ø—Ä–∏–ª–µ—Ç—ñ–≤ ‚Äî —Ä–æ–º–∞–Ω—Ç–∏–∫–∞...',
        '–†–∞–∫–µ—Ç–Ω–∞ –≤–µ—á–µ—Ä—è ‚Äî –Ω–µ –¥–ª—è –Ω–∞—Å üò¨',
        '–©–æ—Å—å –º—á–∏—Ç—å... –º–∞–±—É—Ç—å –Ω–µ –≥–æ–ª—É–± –º–∏—Ä—É üïäÔ∏è',
        '–õ–µ—Ç–∏—Ç—å, –∞–ª–µ –Ω–µ —Å—é—Ä–ø—Ä–∏–∑ –≤—ñ–¥ –°–∞–Ω—Ç–∏ üéÖ',
    ]

    if not await client.is_user_authorized():
        try:
            await client.send_code_request(phone_number)
            code = input("–í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: ")
            await client.sign_in(phone_number, code)
        except SessionPasswordNeededError:
            pw = input("Telegram –ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å (2FA): ")
            await client.sign_in(password=pw)

    for channel in CHANNELS:
        try:
            entity = await client.get_entity(channel)
            async for msg in client.iter_messages(entity, limit=5):
                if msg.id == last_messages.get(channel):
                    break

                text_matched = False
                if msg.text:
                    lower_text = msg.text.lower()
                    if any(kw in lower_text for kw in keywords):
                        text_matched = True
                        funny = random.choice(humor)
                        messages.append(f"üì° {channel.split('/')[-1]}:\n{funny}\n\n{msg.text[:800]}")

                if msg.media and isinstance(msg.media, MessageMediaPhoto):
                    messages.append(f"üó∫ –ö–∞—Ä—Ç–∞ –∞–±–æ —Ñ–æ—Ç–æ –∑ {channel.split('/')[-1]} ‚Äî –ø–æ–¥–∏–≤–∏—Å—å —Å–∞–º.")

                if text_matched or msg.media:
                    last_messages[channel] = msg.id

        except Exception as e:
            messages.append(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {channel}: {e}")

    await client.disconnect()
    return messages

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(–°–∏—Ç—É–∞—Ü—ñ—è ‚ö†Ô∏è)$"), situation))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))
    print("‚úÖ –ë–æ—Ç –®–∞—Ö–µ–¥–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ. –°–ª—É—Ö–∞—î–º–æ –∫–∞–Ω–∞–ª–∏.")
    await app.run_polling()

# üü¢ –ó–∞–ø—É—Å–∫–∞—î–º–æ
if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())




