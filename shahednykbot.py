
import asyncio
import logging
from telethon import TelegramClient
from telethon.tl.types import MessageMediaPhoto
from telethon.errors import SessionPasswordNeededError
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import nest_asyncio
import os
import random

# –î–∞–Ω—ñ –¥–æ—Å—Ç—É–ø—É
api_id = 26549615
api_hash = "f43d6245868e5bae41c40872fb873dec"
bot_token = "7395027911:AAGkiRcvxs8hP878uv9nvo5mGwDe39loxFg"

# –ö–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
channels = [
    "https://t.me/DeepStateUA",
    "https://t.me/RVvoenkor",
    "https://t.me/sentdefender",
    "https://t.me/PpoUaRadar",
    "https://t.me/vanek_nikolaev"
]

keywords = ["—à–∞—Ö–µ–¥", "—à–∞—Ö–µ–¥–∏", "–¥—Ä–æ–Ω", "—Ä–∞–∫–µ—Ç–∞", "—Ä–∞–∫–µ—Ç–∏", "—Ç—Ä–∏–≤–æ–≥–∞", "–ø—Ä–∏–ª—å–æ—Ç", "–≤–∏–±—É—Ö", "—ñ—Å–∫–∞–Ω–¥–µ—Ä", "–∫—ñ–Ω–∂–∞–ª", "—Å–º–µ—Ä—á", "—Ç–æ—Ä–Ω–∞–¥–æ", "–≥—Ä–∞–¥–∏", "–ø–æ–≤—ñ—Ç—Ä—è–Ω–∞", "—è–¥–µ—Ä–Ω–∞"]

# –ó–∞–º—ñ–Ω–∞ —Ñ—Ä–∞–∑ –¥–ª—è –≥—É–º–æ—Ä—É
jokes = [
    "üß† <b>–ì—É–º–æ—Ä –±–æ—Ç–∞</b>: –ø–æ–≥–∞–Ω—ñ —à–∞—Ö–µ–¥–∏–∫–∏ –∑–Ω–æ–≤—É –ª—ñ—Ç–∞—é—Ç—å, –∞ –º–∏ —Ç—Ä–∏–º–∞—î–º–æ—Å—å!",
    "ü§£ <b>–ì—É–º–æ—Ä</b>: –∑–Ω–æ–≤—É —Ü—ñ –º—É—Ö–æ–∂—É–∫–∏ –ø—Ä–∏–ª–µ—Ç—ñ–ª–∏! –î–µ —Ä–∞–∫–µ—Ç–∫–∞?",
    "üî• <b>–ö–æ–º–µ–Ω—Ç–∞—Ä</b>: —á–∞—Å —Å—Ö–æ–≤–∞—Ç–∏—Å—å —É –≤–∞–Ω–Ω—ñ —Ç–∞ –ø—Ä–∏–∫–∏–Ω—É—Ç–∏—Å—å –º–æ–∫—Ä–æ—é —Ç—Ä—è–ø–∫–æ—é.",
    "üì° <b>–ó–≤—ñ—Ç</b>: —Ç—Ä–∏–≤–æ–≥–∞, –±–æ —Ä–∞–∫–µ—Ç–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ —Ç—Ä–æ—Ö–∏ –ø–æ–ª—ñ—Ç–∞—Ç–∏.",
    "üí© <b>–Ü–Ω—Ñ–∞</b>: —à–∞—Ö–µ–¥–∏ –∑–Ω–æ–≤—É –≤ —Ä–µ–∂–∏–º—ñ –¥—É—Ä–∫–∏ ‚Äî –±–µ—Ä–µ–∂–∏ –≥–æ–ª–æ–≤—É!",
]

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
keyboard = [[KeyboardButton("–°–∏—Ç—É–∞—Ü—ñ—è")]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
app = ApplicationBuilder().token(bot_token).build()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telethon –∫–ª—ñ—î–Ω—Ç–∞
nest_asyncio.apply()
client = TelegramClient("anon", api_id, api_hash)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –®–∞—Ö–µ–¥–∏–∫ ü§ñ. –ù–∞—Ç–∏—Å–Ω–∏ '–°–∏—Ç—É–∞—Ü—ñ—è', —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏.", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∏—Ç—É–∞—Ü—ñ—è"
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–°–∏—Ç—É–∞—Ü—ñ—è":
        messages = []
        media = []

        async with client:
            for channel in channels:
                try:
                    entity = await client.get_entity(channel)
                    async for msg in client.iter_messages(entity, limit=10):
                        if msg.text and any(word in msg.text.lower() for word in keywords):
                            if not msg.text.startswith("üîû") and "@" not in msg.text:
                                messages.append(f"<b>üì° {channel.split('/')[-1]}:</b>
{msg.text[:800]}")
                            if msg.media and isinstance(msg.media, MessageMediaPhoto):
                                media.append(msg.media)

                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {channel}: {e}")

        if messages:
            await update.message.reply_text(random.choice(jokes), parse_mode=ParseMode.HTML)
            for text in messages[:5]:
                await update.message.reply_text(text, parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó üí§", reply_markup=reply_markup)

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT, handle_message))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    client.start()
    app.run_polling()
